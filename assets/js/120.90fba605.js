(window.webpackJsonp=window.webpackJsonp||[]).push([[120],{428:function(t,s,a){"use strict";a.r(s);var n=a(19),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"node-01-http-nodejs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-01-http-nodejs"}},[t._v("#")]),t._v(" node-01 http nodejs")]),t._v(" "),a("h2",{attrs:{id:"一、http协议"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、http协议"}},[t._v("#")]),t._v(" 一、HTTP协议")]),t._v(" "),a("ol",[a("li",[t._v("什么是协议")])]),t._v(" "),a("p",[t._v("HTTP(Hyper Text Transfer Protocol,超文本传输协议)，HTTP是一个基于请求与响应模式的、无状态的、应用层的协议；http用于从web服务器(如:apache/nginx/iis)传输超文本到本地客户机(如:浏览器)的传送协议。HTTP是无状态的，服务器其实是不知道谁访问的它；")]),t._v(" "),a("p",[t._v("简单来说HTTP协议就是计算机与计算机之间通信的标准。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("http协议的原理：[重点]")])]),t._v(" "),a("p",[t._v("●建立连接：客户端与web服务器建立连接，服务端给出响应就可以建立连接了。")]),t._v(" "),a("p",[t._v("●发送请求：客户端按照协议的要求通过连接向服务端发送自己的请求。")]),t._v(" "),a("p",[t._v("●给出应答：服务端按照客户端的要求给出应答，把结果（HTML 文件）返回给客户端。")]),t._v(" "),a("p",[t._v("●关闭连接：客户端接到应答后关闭连接")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("常见的协议有：http[s]、smtp[发邮件]、pop3[收邮件]、ftp[文件上传下载]")])]),t._v(" "),a("p",[t._v("DNS[域名解析服务器]服务器：www.baidu.com[域名]与服务器ip对应；")]),t._v(" "),a("p",[t._v("了解：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("HTTP1.0用的是非持久连接，客户端必须为每一个待请求的对象建立并维护一个新的连接。因为同一个页面可能存在多个对象，所以非持久连接可能使一个页面的下载变得十分缓慢，而且这种短连接增加了网络传输的负担。\n\nHTTP1.1引入了持久连接，允许在同一个连接中存在多次数据请求和响应，即在持久连接情况下，服务器在发送完响应后并不关闭TCP连接，而客户端可以通过这个连接继续请求其他对象。\n")])])]),a("h2",{attrs:{id:"二、http请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、http请求"}},[t._v("#")]),t._v(" 二、HTTP请求")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("HTTP请求由三部分组成，分别是：请求行、消息报头、请求正文[可为空]")]),t._v(" "),a("p",[t._v("请求行以请求方法开头，以空格分开，后面跟着请求的URL和协议的版本；")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("         格式：Method Request-URI HTTP-Version CRLF（回车或换行）\n\n                   GET /demo.html HTTP/1.1\n")])])]),a("p",[t._v("消息报头格式：host:www.baidu.com")])])]),t._v(" "),a("h2",{attrs:{id:"三、http响应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、http响应"}},[t._v("#")]),t._v(" 三、HTTP响应")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("HTTP响应也是由三个部分组成，分别是：状态行、消息报头、响应正文")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v(" 状态行格式为：HTTP-Version Status-Code Reason-Phrase CRLF\n\n                        HTTP/1.1 200 OK\n\n    HTTP-Version      服务器HTTP协议的版本；\n\n    Status-Code        服务器发回的响应状态代码；\n\n    Reason-Phrase    状态代码的文本描述。\n")])])])])]),t._v(" "),a("p",[t._v("常见的消息报头有：content-type：text/html")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("                          content-length: 传输字符的长度；\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("状态码")])]),t._v(" "),a("p",[t._v("状态代码由三位数字组成，第一个数字定义了响应的类别，且有五种可能取值：")]),t._v(" "),a("p",[t._v("1xx：指示信息--------请求已接收，继续处理")]),t._v(" "),a("p",[t._v("2xx：成功-------------请求已被成功接收、理解、接受")]),t._v(" "),a("p",[t._v("3xx：重定向-----------要完成请求必须进行更进一步的操作")]),t._v(" "),a("p",[t._v("4xx：客户端错误------请求有语法错误或请求无法实现")]),t._v(" "),a("p",[t._v("5xx：服务器端错误----服务器未能实现合法的请求")]),t._v(" "),a("p",[t._v("常见状态代码、状态描述、说明：")]),t._v(" "),a("p",[t._v("200 OK     客户端请求成功")]),t._v(" "),a("p",[t._v("400 Bad Request    客户端请求有语法错误，不能被服务器所理解")]),t._v(" "),a("p",[t._v("401 Unauthorized  请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用")]),t._v(" "),a("p",[t._v("403 Forbidden         服务器收到请求，但是拒绝提供服务")]),t._v(" "),a("p",[t._v("404 Not Found        请求资源不存在，eg：输入了错误的URL")]),t._v(" "),a("p",[t._v("500 Internal Server Error     服务器发生不可预期的错误")]),t._v(" "),a("p",[t._v("503 Server Unavailable        服务器当前不能处理客户端的请求，一段时间后可能恢复正常")]),t._v(" "),a("p",[t._v("Telnet模拟HTTP的GET请求：（了解）")]),t._v(" "),a("p",[t._v("（1）打开cmd控制面板")]),t._v(" "),a("p",[t._v("（2）telnet 192.168.1.100 80；")]),t._v(" "),a("p",[t._v("（3）ctrl+]  打开本地回显功能，之后直接回车；")]),t._v(" "),a("p",[t._v("（4）输入GET请求：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("    请求行：get /test.php HTTP/1.1\n\n    请求头：host:localhost   访问本地；\n\n    请求头信息与请求正文之间必须空格；\n")])])]),a("h2",{attrs:{id:"四、命令行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、命令行"}},[t._v("#")]),t._v(" 四、命令行")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("命令行窗口、CMD窗口 ：")]),t._v(" "),a("p",[t._v("可以执行一些内部命令，可以执行一些exe程序，同时也能打开文件")])]),t._v(" "),a("li",[a("p",[t._v("运行方式：")])])]),t._v(" "),a("p",[t._v("（1）开始菜单 win+r   打开输入cmd；")]),t._v(" "),a("p",[t._v("（2）快捷方式：在当前目录下 shift+右键->在此处打开命令窗口")]),t._v(" "),a("p",[t._v("（3）资源管理器地址栏直接输入cmd")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("cmd常用的指令：")])]),t._v(" "),a("p",[t._v("cls 清屏，dir 目录，cd 进入指定目录，tab 快速实例，md 创建目录，ctrl+c 终止当前命令；")]),t._v(" "),a("p",[t._v("D:冒号切换盘符；一个点表示当前目录，两个点表示上一级目录；")]),t._v(" "),a("h2",{attrs:{id:"五、环境变量-了解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、环境变量-了解"}},[t._v("#")]),t._v(" 五、环境变量(了解)")]),t._v(" "),a("p",[t._v("（1）全局变量，将目录的绝对路径加&复制到Path(路径)最后面，之后可以使用cmd命令打开相应的软件；")]),t._v(" "),a("p",[t._v("（2）环境变量有用户级变量和系统级变量；")]),t._v(" "),a("p",[t._v("（3）系统刚刚安装完，有时候用户的变量当中是没有path的。 变量名不区分大小写；")]),t._v(" "),a("p",[t._v("（4）设置好path以后，重启cmd，你新配置的环境变量才生效")]),t._v(" "),a("h2",{attrs:{id:"六、node-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、node-简介"}},[t._v("#")]),t._v(" 六、Node 简介")]),t._v(" "),a("ol",[a("li",[t._v("了解：")])]),t._v(" "),a("p",[t._v("（1）Node.js是一个能够在服务器端（后端）运行JavaScript的开放源代码、跨平台JavaScript运行环境，直接运行js文件是无法运行的，Node 环境就是运行javascript代码（ 运行ECMAscript ）")]),t._v(" "),a("p",[t._v("（2）Node采用Google开发的V8引擎运行js代码，使用事件驱动、非阻塞和异步I/O模型等技术来提高性能，可优化应用程序的传输量和规模。")]),t._v(" "),a("p",[t._v("（3）Node.js的核心模块包括文件系统I/O、网络（HTTP、TCP、UDP、DNS、TLS/SSL等）、二进制数据流、加密算法、数据流等等。Node模块的API形式简单，降低了编程的复杂度。")]),t._v(" "),a("p",[t._v("（4）使用框架可以加速开发。常用的框架有Express.js、Socket.IO和Connect等Node.js的程序可以在Windows、Linux、Unix、Mac OS X等服务器上运行；")]),t._v(" "),a("p",[t._v("（5）I/O (Input/Output)     I/O操作指的是对磁盘的读写操作")]),t._v(" "),a("p",[t._v("（6）node.js 不属于前端，它属于后端，它就是一个环境")]),t._v(" "),a("p",[t._v("（7）node.js操作的是服务器上的文件，不是本地的文件；")]),t._v(" "),a("p",[a("img",{attrs:{src:"http://notecdn.heny.vip/images/node-01_http_nodejs-01.png",alt:"image"}})]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("重点：")])]),t._v(" "),a("p",[t._v("（1）通过Node环境，js代码可以在服务器端运行")]),t._v(" "),a("p",[t._v("（2）Node实现了ECMAscript的标准（语法），Node是没有DOM和BOM")]),t._v(" "),a("p",[t._v("（3）Node中可以使用ECMAscript提供的所有的内置对象")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("     String Number Boolean Math Date RexExp Function Object Array  \n")])])]),a("p",[t._v("（4）封装出了其它的api方法（函数）")]),t._v(" "),a("h2",{attrs:{id:"七、node特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、node特点"}},[t._v("#")]),t._v(" 七、Node特点:")]),t._v(" "),a("ol",[a("li",[t._v("node.js是基于模块化开发的，使用require()方法调用模块；")]),t._v(" "),a("li",[t._v("非阻塞异步回调，err（错误优先思想）；")]),t._v(" "),a("li",[t._v("所有的操作都基于事件驱动（事件订阅与发布机制）；")]),t._v(" "),a("li",[t._v("node.js是单线程的；")])]),t._v(" "),a("p",[t._v("node的特点：\n①模块化，②事件机制，③非阻塞异步回调；")]),t._v(" "),a("h2",{attrs:{id:"八、node环境安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、node环境安装"}},[t._v("#")]),t._v(" 八、Node环境安装")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("它自己会把以下两个相关的路径加到path里面")]),t._v(" "),a("p",[t._v("C:\\Users\\Administrator\\AppData\\Roaming\\npm")]),t._v(" "),a("p",[t._v("C:\\Program Files\\nodejs")])])]),t._v(" "),a("p",[t._v("nodejs的api开发手册:http://nodejs.cn/")]),t._v(" "),a("p",[t._v("node -v 查看node版本")]),t._v(" "),a("p",[t._v("cmd面板输入node 加相应的js文件可以打开node服务器；")]),t._v(" "),a("p",[t._v("node自动补齐：npm i -g typings")]),t._v(" "),a("p",[t._v("启用：在项目所在目录(在这里是NodeSnippet文件夹中)增加一个名为jsconfig.json的空文件。")]),t._v(" "),a("h2",{attrs:{id:"九、node搭建服务器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九、node搭建服务器"}},[t._v("#")]),t._v(" 九、node搭建服务器")]),t._v(" "),a("ol",[a("li",[t._v("引入HTTP模块")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" http "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//引入http模块[该模块是node内置模块]，用来创建服务器；")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("创建web服务器")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" server "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("；\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("监听")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//注意：node是基于事件驱动")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//为http对象绑定一个request事件（请求）")]),t._v("\nserver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'request'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//设置响应头 的状态码及文件编码")]),t._v("\n    res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("writeHead")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'content-type'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/html;charset=utf-8'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//如果不设置writeHeader则不会编码标签；")]),t._v("\n    res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("write")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<h1>hello</h1>'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//给前端返回数据，而且返回的必须是一个字符串类型的数据 或 Buffer（二进制）")]),t._v("\n    res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//返回响应完成了，end只能写一次；")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("回调函数里面的两个形参：require请求，response响应；")]),t._v(" "),a("p",[t._v("（4）、设置监听端口")]),t._v(" "),a("p",[t._v("server.listen(8088)；//8080是端口号")]),t._v(" "),a("p",[t._v("计算机端口默认有0-65535之间，其中小于1024的端口被计算机常用服务占用；")]),t._v(" "),a("p",[t._v("js文件有变动，需要cmd重新执行一下命令；")]),t._v(" "),a("p",[t._v("res.writeHead();设置头信息，如果不设置不会编码标签；")]),t._v(" "),a("p",[t._v("res.write()；页面上添加内容，可以多个；")]),t._v(" "),a("p",[t._v("res.end()；响应完成，一个页面end只能写一次；")]),t._v(" "),a("p",[t._v("server.listen()；设置监听端口；")]),t._v(" "),a("p",[t._v("req.url   获取path路径；")]),t._v(" "),a("p",[t._v("req.method  获取提交方式，需要大写")]),t._v(" "),a("h2",{attrs:{id:"十、fs读取文件内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十、fs读取文件内容"}},[t._v("#")]),t._v(" 十、fs读取文件内容")]),t._v(" "),a("p",[t._v("fs.readFile(path[, options], callback)")]),t._v(" "),a("p",[t._v("__dirname:获取当前文件所在绝对路径")]),t._v(" "),a("p",[t._v("__filename:获取当前文件的完整绝对路径")]),t._v(" "),a("p",[t._v("options可以放一个对象：对象值填写encoding:'utf-8'，则输入的数据不需要.toString()也能看懂；")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//引入fs模块")]),t._v("\nfs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__dirname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'a.txt'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'错误信息'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      直接抛出错误；\n")])])]),a("h2",{attrs:{id:"十一、事件订阅与发布-模块：events"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十一、事件订阅与发布-模块：events"}},[t._v("#")]),t._v(" 十一、事件订阅与发布  模块：events")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v(" 参考地址：[https://www.jianshu.com/p/0aacfec05046](https://www.jianshu.com/p/0aacfec05046)\n")])])]),a("p",[t._v("事件机制：发布和订阅功能")]),t._v(" "),a("ol",[a("li",[t._v("定义：")])]),t._v(" "),a("p",[t._v("（1）大多数 Node.js 核心 API 构建于惯用的异步事件驱动架构，其中某些类型的对象（又称触发器，Emitter）会触发命名事件来调用函数（又称监听器，Listener）。")]),t._v(" "),a("p",[t._v("（2）所有能触发事件的对象都是EventEmitter类的实例，有一个eventEmitter.on()函数，用于将一个或多个函数绑定到命名事件上，事件的命名通常是驼峰式的字符串；")]),t._v(" "),a("p",[t._v("（3）EventEmitter对象触发一个事件时，所有绑定在该事件上的函数都会被同步调用；")]),t._v(" "),a("p",[t._v(".on()：注册监听器，.emit()；用于触发事件；")]),t._v(" "),a("p",[t._v("创建一个事件监听：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("①、引入events模块\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" eventEmitter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'events'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n②、实例化类\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myEmitter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("eventEmitter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n③、监听事件\nmyEmitter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'event'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'监听中.....'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n④、触发监听的事件\nmyEmitter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("emit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'event'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//event是自定义的事件名；")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("传参和this指向")])]),t._v(" "),a("p",[t._v("事件的this指向监听器所绑定的实例，如果是箭头函数的this指向外层this；")]),t._v(" "),a("p",[t._v("在emit方法括号里紧跟着事件传参，在on监听事件回调函数形参来接收，可以传多个；")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("     如：eventEmitter.emit('event','a','b')\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("异步vs同步\nEventEmitter是同步顺序执行所有监听器的，所以必须确保事件排序正确；")])]),t._v(" "),a("p",[t._v("使用 setImmediate() 或 process.nextTick() 切换到异步模式：")]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[t._v("事件仅调用一次；")])]),t._v(" "),a("p",[t._v("eventEmitter.on() 注册监听器时，会每次emit触发命名事件都会调用一次，增加一次；")]),t._v(" "),a("p",[t._v("可以使用 eventEmitter.once() 可以注册最多可调用一次的监听器；当事件被触发时，监听器会注销再调用，只能调用一次；")]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[t._v("错误事件")])]),t._v(" "),a("p",[t._v("当eventEmitter实例出错时，需要抛出错误")]),t._v(" "),a("p",[t._v("注册错误事件：myEmitter.on('error',(err)=>{console.log('错误信息')})")]),t._v(" "),a("p",[t._v("抛出错误：myEmitter.emit('error',new Error('错误信息'))；")]),t._v(" "),a("p",[t._v("如果不注册错误事件会造成node.js崩溃；")]),t._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[t._v("EventEmitter类")])]),t._v(" "),a("p",[t._v("由events模块定义；")]),t._v(" "),a("p",[t._v("当新增监听器时，会触发newListener事件，当移除已存在的事件监听器时，则触发removeListener；")]),t._v(" "),a("p",[t._v("newListener事件：")]),t._v(" "),a("p",[t._v("ES5面向对象创建订阅发布的例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Even")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 声明一个空对象，用于存储值;")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eventBus "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// on用来监听一个事件，并传入两个参数，一个是事件名，一个是回调函数;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Even")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("on")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("eventname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("callback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断该函数里的事件名是否存在")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eventBus"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("eventname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果存在则新增一个方法;")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eventBus"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("eventname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果不存在则使用数组方式存入一个事件;")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eventBus"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("eventname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// emit用来触发一个事件,一个是触发的事件名,第二个是传入的参数;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Even")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("emit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("eventname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// emit用来监听一个事件的触发")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eventBus"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("eventname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果有该事件，则循环该事件并执行该事件")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eventBus"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("eventname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("item")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("item")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);