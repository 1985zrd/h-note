(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{318:function(t,s,a){"use strict";a.r(s);var n=a(19),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"js-02-javascript数据类型篇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js-02-javascript数据类型篇"}},[t._v("#")]),t._v(" js-02 javascript数据类型篇")]),t._v(" "),a("p",[t._v("ECMAScript中有5种基本数据类型：Undefined、Null、Boolean、Number、String")]),t._v(" "),a("p",[t._v("三种基本包装数据类型：String、Number、Boolean")]),t._v(" "),a("p",[t._v("有一种复杂数据类型：Object；")]),t._v(" "),a("p",[a("strong",[t._v("弱类型语言：")]),t._v("\njavascript是弱类型语言，在声明时是不需要定义类型的，变量的类型就是其值的类型；")]),t._v(" "),a("p",[t._v("缺点：在不确定的地方就会发生类型转换，无法确定类型，必须要掌握类型转换的原理；")]),t._v(" "),a("h2",{attrs:{id:"一、typeof操作符-检测数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、typeof操作符-检测数据类型"}},[t._v("#")]),t._v(" 一、typeof操作符(检测数据类型)")]),t._v(" "),a("ol",[a("li",[t._v("对一值使用了typeof操作符，会返回以下某个字符串；")])]),t._v(" "),a("p",[t._v("'undefined' //如果这个值未定义")]),t._v(" "),a("p",[t._v("'boolean'  // 如果是布尔值")]),t._v(" "),a("p",[t._v("'string'   // 如果是字符串")]),t._v(" "),a("p",[t._v("'number'   // 如果是数值")]),t._v(" "),a("p",[t._v("'object'   // 如果值是对象或null")]),t._v(" "),a("p",[t._v("'function' // 如果是函数;")]),t._v(" "),a("p",[t._v("例子:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" message"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'string'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("95")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'number'")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("typeof操作符的操作数可以是变量，也可以是字面量")]),t._v(" "),a("li",[t._v("typeof不能准确判断变量是什么类型，null会返回object，因为null的定义是空对象指针；")])]),t._v(" "),a("p",[t._v("常使用的环境：")]),t._v(" "),a("p",[t._v("判断函数是否有传值：typeof val == 'undefined'；val是形参；")]),t._v(" "),a("p",[t._v("判断函数传值的类型：typeof val == 'number'；")]),t._v(" "),a("p",[t._v("因为检测数据类型时，输入的结果是字符串，所以需要加引号；typeof (typeof a) 检测传入的a的类型的类型；")]),t._v(" "),a("h2",{attrs:{id:"二、undefined类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、undefined类型"}},[t._v("#")]),t._v(" 二、Undefined类型")]),t._v(" "),a("ol",[a("li",[t._v("Undefined类型只有一个值，即特殊的undefined，")]),t._v(" "),a("li",[t._v("在使用var声明变量时，没有赋值，就是undefined；")]),t._v(" "),a("li",[t._v("函数没有明确返回值，如果接受了，结果是undefined；")])]),t._v(" "),a("p",[t._v("注意：即使不声明，使用typeof也会返回'undefined'；")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'undefined'")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'undefined'")]),t._v("\n")])])]),a("h2",{attrs:{id:"三、null类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、null类型"}},[t._v("#")]),t._v(" 三、Null类型")]),t._v(" "),a("ol",[a("li",[t._v("Null类型是第二个只有一个值的数据类型，这个特殊的值是null；")]),t._v(" "),a("li",[t._v("null表示一个空对象指针，因此检测null的数据类型时，会返回object；")]),t._v(" "),a("li",[t._v("如果需要保存的值类型为对象，建议赋值为null；")])]),t._v(" "),a("p",[t._v("注意：判断undefined == null时，结果为true，因为undefined值是派生自null值的，无论在什么情况下都没有必要把一个变量的值显式地设置为undefined；")]),t._v(" "),a("p",[t._v("面试题：")]),t._v(" "),a("p",[t._v("（1）undefined和null的区别：")]),t._v(" "),a("p",[t._v("null表示值为空，但是是object对象，")]),t._v(" "),a("p",[t._v("undefined表示变量没有初始化，值为空缺；")]),t._v(" "),a("p",[t._v("null ==undefined   // 因为都为空，不对比类型；")]),t._v(" "),a("p",[t._v("null === undefined  //false  类型不同")]),t._v(" "),a("p",[t._v("（2）null 是对象吗？")]),t._v(" "),a("p",[t._v("null的返回值是object，但是null不是对象，而是基本数据类型的一种；")]),t._v(" "),a("h2",{attrs:{id:"四、boolean类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、boolean类型"}},[t._v("#")]),t._v(" 四、Boolean类型")]),t._v(" "),a("ol",[a("li",[t._v("boolean类型是使用最多的类型，只有两个值：true(真)和false(假)，在ECMAScript中是区分大小写的，True和False都不是boolean类型，只是标识符；")]),t._v(" "),a("li",[t._v("boolean类型的转换规则")])]),t._v(" "),a("p",[t._v("数据类型             转换true的值              转换false的值")]),t._v(" "),a("p",[t._v("Boolean                true                            false")]),t._v(" "),a("p",[t._v("String                   任何非空字符串            ''(空字符串)")]),t._v(" "),a("p",[t._v("Number               任何非零数值               0和NaN")]),t._v(" "),a("p",[t._v("Object                  任何对象                      null")]),t._v(" "),a("p",[t._v("Undefined           不适用转换true            undefined")]),t._v(" "),a("h2",{attrs:{id:"五、number类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五、number类型"}},[t._v("#")]),t._v(" 五、Number类型")]),t._v(" "),a("ol",[a("li",[t._v("最基本的数值字面量格式是十进制整数，")])]),t._v(" "),a("p",[t._v("八进制字面值第一位必须是0且后面的值必须小于8，否则还是十进制；")]),t._v(" "),a("p",[t._v("十六进制以0x开头，十六进制一般用在表示颜色上；")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("p",[t._v("浮点数值：在表示0.1时，通常可以直接.1，去掉0，浮点数值的最高精度是17位小数，0.1加0.2的结果不是0.3，而是0.300000000000000004，这是使用基于IEEE754数值的浮点计算的通病，所有语言如此，永远不要测试某个特点的浮点数值；")])]),t._v(" "),a("li",[a("p",[t._v("数值范围：Number.MIN_VALUE   最小值，这个值是5e-324，")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("               Number.MAX_VALUE   最大值，这个值是1.7976931348623157e+308\n\n                 Infinity  无穷大    -Infinity  无穷小，isFinite() 判断是还是无穷数；\n")])])]),a("p",[t._v("e的表示法：3.125e7 == 31250000，实际是3.125乘以10的7次幂；0.0000003表示3e-7；")])]),t._v(" "),a("li",[a("p",[t._v("NaN")])])]),t._v(" "),a("p",[t._v("（1）即非数值，是一个特殊值，任何数值除以非数值会返回NaN，不会影响其他代码的执行；")]),t._v(" "),a("p",[t._v("（2）NaN与任何值都不相等，NaN不等于NaN；")]),t._v(" "),a("p",[t._v("（3）判断是不是NaN，使用isNaN，在判断时会尝试将这个值转换为数值再进行判断；isNaN在对对象调用时，会首先调用对象的valueOf方法，然后再确定该方法返回的值是否可以转换为数值，如果不能，则基于这个返回值再调用toString()方法；")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'blue'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false  (true被转换为1)")]),t._v("\n")])])]),a("ol",{attrs:{start:"5"}},[a("li",[t._v("数值的转换\n（1）Number()、parseInt()、parseFloat()，第一个函数可以用于任何数据类型，另外两个函数则专门用于把字符串转换成数值；")])]),t._v(" "),a("p",[t._v("（2）Number转换规则")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("如果是boolean值，true为1，false为0")])]),t._v(" "),a("li",[a("p",[t._v("如果是数字，直接返回传入的数值；")])]),t._v(" "),a("li",[a("p",[t._v("如果是null，返回0")])]),t._v(" "),a("li",[a("p",[t._v("如果是undefined，返回NaN，特殊值")])]),t._v(" "),a("li",[a("p",[t._v("如果是字符串,遵循以下规则")]),t._v(" "),a("ul",[a("li",[t._v("如果字符串只包含数字，'1'转换1，'011'转换为11；")]),t._v(" "),a("li",[t._v("如果包含有效浮点格式，如：'1.1'，则将转换对应的浮点数值；")]),t._v(" "),a("li",[t._v("如果字符串包含有效十六进制，则将其转换相同大小的十进制")]),t._v(" "),a("li",[t._v("如果字符串是空的，转换为0")]),t._v(" "),a("li",[t._v("如果字符串除以上规则，转换为NaN；")])])]),t._v(" "),a("li",[a("p",[t._v("如果是对象，则调用对象的valueOf方法，如果转换结果是NaN，则调用对象的toString方法；")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'00011'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//11")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])]),a("p",[t._v("注意：空的数组转换为0，空的对象转换为NaN；   一般在需要转换的值前面带上+符，可以直接转换，+[]，转换为0；")]),t._v(" "),a("p",[t._v("（3）parseInt转换规则")]),t._v(" "),a("p",[t._v("由于Number()函数在转换字符串时比较复杂而且不够合理，因此在处理整数的时候更常用的是parseInt函数；")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("parseInt会忽略空格，直到找到第一个非空格字符，如果第一个不是数字或者负号，则返回NaN；")])]),t._v(" "),a("li",[a("p",[t._v("parseInt在转换查找时，如果第一个是数字，则会继续解析第二个字符，直到后续字符遇到一个非数字字符，如：'12px'转换为12；")])]),t._v(" "),a("li",[a("p",[t._v("在遇到小数点时，也不会解析，需要使用parseFloat；")])]),t._v(" "),a("li",[a("p",[t._v("parseInt转换空字符串时，返回NaN，Number转换空字符串返回0；")])]),t._v(" "),a("li",[a("p",[t._v("parseInt有第二个参数，以什么进制来转换；")]),t._v(" "),a("ul",[a("li",[t._v("如：由于16进制是以0x开头的,如果没有0x，'af'转换为NaN，如果是parseInt('af',16)，则转换是175；")]),t._v(" "),a("li",[t._v("'070'是以0开头，转换是以8进制，则是56，如果是parseInt('070',10)，则是70；")])])])]),t._v(" "),a("p",[t._v("（4）parseFloat转换规则")]),t._v(" "),a("ul",[a("li",[t._v("主要是解决parseInt不能识别小数点而诞生的；")]),t._v(" "),a("li",[t._v("parseFloat只解析10进制，如果是0xA，则解析是0；")])]),t._v(" "),a("ol",{attrs:{start:"6"}},[a("li",[t._v("额外的方法：toFxied(n)，小数点后保留多少位；")])]),t._v(" "),a("p",[t._v("toExponential(n)，返回指数表示法（也称e表示法）；")]),t._v(" "),a("p",[t._v("toPrecision(n)，根据要处理的数值决定使用toFxied还是toExponential；")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("99")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toPrecision")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"1e+2"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toPrecision")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"99"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toPrecision")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"99.0"')]),t._v("\n")])])]),a("p",[t._v("``|0"),a("code"),t._v(" 可以直接取整，比如：12.3|0   结果是12；")]),t._v(" "),a("h2",{attrs:{id:"六、string类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六、string类型"}},[t._v("#")]),t._v(" 六、String类型")]),t._v(" "),a("ol",[a("li",[t._v("String类型用于表示由零或多个16位Unicode字符组成的字符序列，字符串可以由双引号(\"\")，或单引号('')表示；")]),t._v(" "),a("li",[t._v("字符串的长度可以使用length属性来读取；")]),t._v(" "),a("li",[t._v("转换为字符串：")])]),t._v(" "),a("p",[t._v("（1）使用toString()方法转换，可以传入的参数有2-36之间，一般传入2. 8. 10. 16；")]),t._v(" "),a("p",[t._v("（2）String()转换规则")]),t._v(" "),a("ul",[a("li",[t._v("如果值有toString()方法，则调用该方法并返回相应的结果；")]),t._v(" "),a("li",[t._v("如果值是null或undefined，则返回'null'或'undefined'；")])]),t._v(" "),a("p",[t._v("注意："),a("code",[t._v("null")]),t._v("和"),a("code",[t._v("undefined")]),t._v("值没有"),a("code",[t._v("toString()")]),t._v("这个方法，需要使用"),a("code",[t._v("String()")]),t._v("来转换；")]),t._v(" "),a("p",[t._v("整数直接"),a("code",[t._v(".toString()")]),t._v("会报错，可以添加小括号转换；    (1)"),a("code",[t._v(".toString()")]),t._v("；")]),t._v(" "),a("p",[t._v("如果是对象"),a("code",[t._v(".toString()")]),t._v("，转换成"),a("code",[t._v("[object Object]")]),t._v("；")]),t._v(" "),a("h2",{attrs:{id:"七、复杂数据类型（引用类型）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七、复杂数据类型（引用类型）"}},[t._v("#")]),t._v(" 七、复杂数据类型（引用类型）")]),t._v(" "),a("p",[t._v("Object（对象）、Array（数组）、function（函数）")]),t._v(" "),a("p",[t._v("引用类型任何数据类型都可以储存；")]),t._v(" "),a("p",[t._v("引用类型的地址存储在堆里面，当别的值修改了原始值之后，都会被修改；")]),t._v(" "),a("p",[t._v("基本类型存储的是值，引用类型存储的是地址（指针）")]),t._v(" "),a("h3",{attrs:{id:"object（对象）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object（对象）"}},[t._v("#")]),t._v(" object（对象）")]),t._v(" "),a("p",[t._v("（1）以花括号的形式为对象；")]),t._v(" "),a("p",[t._v("（2）万物皆对象，页面中的任何一个元素都是对象，包括document,window,对象就相当于地球")]),t._v(" "),a("p",[t._v("（3）创建对象的两个方式：")]),t._v(" "),a("p",[t._v("a. 实例化方式：var 变量=new Object()；输出是一个空的花括号，表示对象；")]),t._v(" "),a("p",[t._v("b. 字面量：var 变量 = {}；")]),t._v(" "),a("p",[t._v("c.  Object.create(null)  也可以创建一个新对象；")]),t._v(" "),a("p",[t._v("（4）对象中以键值对表示存储值，键名：键值；也可以叫属性名：属性值；多个键名之间用逗号隔开；")]),t._v(" "),a("p",[t._v("（5）设置对象的元素值：对象名.键名 = 键值；  一般称作键值对；")]),t._v(" "),a("p",[t._v('（6）获取值的方法：①变量名.键名；②变量名[""]，中括号中间必须加引号；')]),t._v(" "),a("h3",{attrs:{id:"array（数组）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array（数组）"}},[t._v("#")]),t._v(" Array（数组）")]),t._v(" "),a("p",[t._v("（1）创建方式：")]),t._v(" "),a("p",[t._v("a. 实例化：var 变量 = new Array()；以中括号形式为数组，一个值表示数组的长度，多个值表示数组的数据；")]),t._v(" "),a("p",[t._v("如果是一个引号引起来的，则是单个数组；")]),t._v(" "),a("p",[t._v("b. 字面量：var 变量 = [  ]")]),t._v(" "),a("p",[t._v("（2）数组的长度是下标加一；")]),t._v(" "),a("p",[t._v("（3）数组的长度可读可写，可以删除数组的数据；")]),t._v(" "),a("p",[t._v("（4）数组不能用typeof来判断是不是数组，判断的是object，判断是不是数组可以用Array.isArray(参数)来判断，返回结果是布尔型；IE9以上支持判断；")]),t._v(" "),a("p",[t._v("（5）数组可以储存所有类型，也可以存储数组和对象；")]),t._v(" "),a("p",[t._v("（6）设置数组：数组名[索引] = 值")]),t._v(" "),a("p",[t._v("（7）获取数据：数组名[索引]；")]),t._v(" "),a("p",[t._v("面试题：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("ary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n")])])]),a("p",[t._v("数组的长度是6，没有声明的为undefined；")]),t._v(" "),a("h3",{attrs:{id:"function函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#function函数"}},[t._v("#")]),t._v(" function函数")]),t._v(" "),a("p",[t._v("function (); 事件处理函数；空格后面可以设置函数名；")]),t._v(" "),a("p",[t._v("调用函数：函数名()；加小括号是直接执行，事件不需要加小括号；")]),t._v(" "),a("p",[a("strong",[t._v("总结:")])]),t._v(" "),a("p",[t._v("基本数据类型：Number，String，Boolean，Undefined，Null")]),t._v(" "),a("p",[t._v("引用数据类型：Object，Array，Function，RegExp，Date，Error")]),t._v(" "),a("p",[t._v("全局数据类型：Math")]),t._v(" "),a("h3",{attrs:{id:"关于javascript中数字的部分知识总结："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于javascript中数字的部分知识总结："}},[t._v("#")]),t._v(" 关于Javascript中数字的部分知识总结：")]),t._v(" "),a("ol",[a("li",[t._v("Javascript中，由于其变量内容不同，变量被分为基本数据类型变量和引用数据类型变量。基本类型变量用八字节内存，存储基本数据类型(数值、布尔值、null和未定义)的值，引用类型变量则只保存对对象、数组和函数等引用类型的值的引用(即内存地址)。")]),t._v(" "),a("li",[t._v("JS中的数字是不分类型的，也就是没有byte/int/float/double等的差异。")]),t._v(" "),a("li",[t._v("基本类型：null，undefined，number，boolean；string比较特殊！！！ 引用类型 Obeject,function，array；")])]),t._v(" "),a("p",[t._v("计算机最小的计量单位是bit,翻译为位")]),t._v(" "),a("p",[t._v("8bit = 1byte,byte翻译为字节")]),t._v(" "),a("p",[t._v("所以32bit = 4 byte")]),t._v(" "),a("p",[t._v("八字节为64位")]),t._v(" "),a("h2",{attrs:{id:"三、检测数据类型："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、检测数据类型："}},[t._v("#")]),t._v(" 三、检测数据类型：")]),t._v(" "),a("h3",{attrs:{id:"instanceof-检测数据类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof-检测数据类"}},[t._v("#")]),t._v(" instanceof 检测数据类")]),t._v(" "),a("p",[t._v("（1）检测前面的变量是不是某个类型，是的话返回true，不是返回false    如果是new 出来的函数，可以使用这个判断。")]),t._v(" "),a("p",[t._v("（2）检测类型时类型首字母需要大写；")]),t._v(" "),a("p",[t._v("（3）检测基本数据类型时需要new实例化，复杂数据类型不需要new实例化；必须要new Number()")]),t._v(" "),a("p",[t._v("（4）数组看是不是Object对象时，返回值是true，但是Array大类的；")]),t._v(" "),a("p",[t._v("示例："),a("code",[t._v("console.log(obj instanceof Object)")]),t._v("；")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false 必须new实例化")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("h3",{attrs:{id:"tostring-call"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tostring-call"}},[t._v("#")]),t._v(" toString.call")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'[object 类型]'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("形参"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("types")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//或者：")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("object Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toLowerCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 转换的函数")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" types "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个方法始终将Object.prototype.toString作为函数传递给call,等价于:Object.prototype.toString.call();")]),t._v("\n")])])]),a("p",[a("strong",[t._v("理解:")])]),t._v(" "),a("ol",[a("li",[t._v("Object.prototype.toString.call, call前面的代码就是this指向;")]),t._v(" "),a("li",[t._v("因为bind是返回绑定的函数, 因此将toString函数放进去作为第一个参数;")]),t._v(" "),a("li",[t._v("由于call需要一个方法来调用, 因此将Function.prototype作为前缀;")])]),t._v(" "),a("p",[t._v("改造:")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("types")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object String];    直接使用types来判断;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("t")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("type")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toString"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("slice")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"constructor判断（扩展）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructor判断（扩展）"}},[t._v("#")]),t._v(" constructor判断（扩展）")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("通过constructor判断的，Math")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Math       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false，在javascript中，没有Math的构造函数，Math的构造函数在Object上，可以使用toString.call来判断；")]),t._v("\n")])])]),a("p",[t._v("不推荐此方法，因为")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" Array"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),a("p",[t._v("如果a=null，则报错;")]),t._v(" "),a("h3",{attrs:{id:"使用原型链判断是否是类型的原型；"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用原型链判断是否是类型的原型；"}},[t._v("#")]),t._v(" 使用原型链判断是否是类型的原型；")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("reg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"八、基本包装数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#八、基本包装数据类型"}},[t._v("#")]),t._v(" 八、基本包装数据类型")]),t._v(" "),a("ol",[a("li",[t._v("javascript中有三个基本包装数据类型：String、Number、Boolean；")])]),t._v(" "),a("p",[t._v("每当读取一个基本类型值的时候，后台就会创建一个对应的基本包装类型的对象，从而让我们能够调用一些方法来操作这些数据，其实String、Number、Boolean三种类型的值在读取的时候由于是基本包装类型（也可以称是引用类型），因此有属性和方法，可以使用点操作符，读取不到的属性返回undefined，而undefind和null两种类型会直接报错；")]),t._v(" "),a("p",[t._v("具体了解查看：高程118页；")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[t._v("基本包装数据类型的特征：")])]),t._v(" "),a("ul",[a("li",[t._v("可以使用new 操作符，当使用new操作符之后的类型使用typeof检测之后是object，但是可以使用instanceof来检测；")])]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("使用new和不使用new的特点\n引用类型与基本包装类型的主要区别就是对象的生存期。使用 new 操作符创建的引用类型的实例，在执行流离开当前作用域之前都一直保存在内存中。而自动创建的基本包装类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁。")])]),t._v(" "),a("h2",{attrs:{id:"九、堆和栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#九、堆和栈"}},[t._v("#")]),t._v(" 九、堆和栈")]),t._v(" "),a("ol",[a("li",[t._v("基本数据类型，储存在栈里面，两个基本数据类型是相等的")]),t._v(" "),a("li",[t._v("引用数据类型，地址存储在栈里面，数据存在堆里面，调用时先从栈里获取地址，再从堆中获取数据，两个复杂数据类型是不相等的；堆里面反复存数据会导致内存占满；")])]),t._v(" "),a("h2",{attrs:{id:"十、new操作符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十、new操作符"}},[t._v("#")]),t._v(" 十、new操作符")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("new操作符创建出来的一定是一个空对象；")])]),t._v(" "),a("li",[a("p",[t._v("如果在构造函数里面，显式写了一个返回值，会发生的情况？")])])]),t._v(" "),a("p",[t._v("如果返回的不是一个对象，相当于没写，会被忽略，也就是说如果在构造函数中显式的返回了一个不是对象的数据类型，最后得到的还是对象，如果是对象，会把设置的对象返回出来")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Car")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" car "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Car")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lishi'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//undefined  因为返回没有name;")]),t._v("\ncar   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// {age:18} 并且不能标识具体谁创建的;")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 第二种情况,返回不是对象;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Car")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" age\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" car "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Car")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lishi'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ncar  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Car {name: 'lishi'}   return 没有起作用;")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("使用new操作符执行了哪些过程")])]),t._v(" "),a("p",[t._v("（1）创建一个空对象")]),t._v(" "),a("p",[t._v("（2）将这个空对象的__proto__（隐式原型）指向函数的原型；")]),t._v(" "),a("p",[t._v("（3）修改this指针，将函数的this指针指向创建出来的对象，并将代码执行一遍；")]),t._v(" "),a("p",[t._v("（4）将创建出来的对象作为返回值进行返回")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shift")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//将第一个函数截取;")]),t._v("\n    obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("arguments"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" obj\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一般new一个函数,函数可以填写return,如果return了就得将函数返回值保存并返回,函数必须是对象,上面第2点已经讲过;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("age")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("create")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// fn{age:18}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("18")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//fn{age:18}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" obj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//true")]),t._v("\n")])])]),a("p",[t._v("增进问题")]),t._v(" "),a("p",[t._v("在使用new操作符时，如果没有参数，括号是可以省略的。")]),t._v(" "),a("h2",{attrs:{id:"十一、运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十一、运算符"}},[t._v("#")]),t._v(" 十一、运算符")]),t._v(" "),a("p",[t._v("js赋值运算符是从右往左的，var a = 1，把1的值赋给a；'.'是优先级最高的运算符；")]),t._v(" "),a("h3",{attrs:{id:"数字运算符："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数字运算符："}},[t._v("#")]),t._v(" 数字运算符：")]),t._v(" "),a("p",[t._v("+ - * / %(取余) ++(自增)   --(自减)")]),t._v(" "),a("p",[t._v("+ 号遇到字符串变成拼接；")]),t._v(" "),a("p",[t._v("++(--) 在前，先运算，后赋值；")]),t._v(" "),a("p",[t._v("++(--) 在后，先赋值，后运算；")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nj"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nj"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nj"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h3",{attrs:{id:"赋值运算符："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值运算符："}},[t._v("#")]),t._v(" 赋值运算符：")]),t._v(" "),a("p",[t._v("=     +=     -=    *=     /=    %=")]),t._v(" "),a("p",[t._v("a+=2 为 a=a+2;")]),t._v(" "),a("p",[t._v("一个等号为赋值，")]),t._v(" "),a("p",[t._v("赋值运算表达式：由赋值运算符链接起来的叫赋值表达式；")]),t._v(" "),a("h3",{attrs:{id:"比较运算符："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较运算符："}},[t._v("#")]),t._v(" 比较运算符：")]),t._v(" "),a("p",[t._v(">  >=  <  <=  !=(不等于)     !==(绝对不等于)   ==(等于)  ===(绝对等于)")]),t._v(" "),a("p",[t._v("'!='   不等于只看值是否相同，不看类型")]),t._v(" "),a("p",[t._v("'!=='  绝对不等于除了看值不同，还看类型是否不同；")]),t._v(" "),a("p",[t._v("比较运算符的输出结果是boolear类型")]),t._v(" "),a("p",[t._v('"two"＞"three"//结果为true    "tw"在字母表中的索引大于"th"')]),t._v(" "),a("h3",{attrs:{id:"逻辑运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符"}},[t._v("#")]),t._v(" 逻辑运算符")]),t._v(" "),a("p",[t._v("&&(与--并且)    ||(或---或者)    !(非--取反或取非)")]),t._v(" "),a("p",[t._v("&& 只要有一个为假，就为假；")]),t._v(" "),a("p",[t._v("|| 只要有一个为真，就为真；")]),t._v(" "),a("p",[t._v("!表达式：  表达式1的结果是true，整个结果为false")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[t._v("            表达式1的结果是false，整个结果为true；\n")])])]),a("p",[t._v('(!"")为true  空字符串为假，取非就为真')]),t._v(" "),a("h2",{attrs:{id:"十二、位运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十二、位运算"}},[t._v("#")]),t._v(" 十二、位运算")]),t._v(" "),a("p",[t._v("位运算适用于32位整数，所以精度可能会丢失")]),t._v(" "),a("h3",{attrs:{id:"用-取整"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用-取整"}},[t._v("#")]),t._v(" 用'|'取整")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.5")]),t._v("\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\n")])])]),a("h3",{attrs:{id:"用-取半"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用-取半"}},[t._v("#")]),t._v(" 用>>取半")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//2")]),t._v("\n")])])]),a("h3",{attrs:{id:"用-加倍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用-加倍"}},[t._v("#")]),t._v(" 用<<加倍")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\nnum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//4")]),t._v("\n")])])]),a("h3",{attrs:{id:"用-两值交换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用-两值交换"}},[t._v("#")]),t._v(" 用'^'两值交换")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^=")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^=")]),t._v(" a\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^=")]),t._v(" b\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2 1;")]),t._v("\n")])])]),a("h3",{attrs:{id:"用-判断奇数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用-判断奇数"}},[t._v("#")]),t._v(" 用&判断奇数")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" m "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\nn "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true 奇数")]),t._v("\nm "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//false 偶数")]),t._v("\n")])])]),a("h3",{attrs:{id:"用-判断项是否存在"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用-判断项是否存在"}},[t._v("#")]),t._v(" 用'~'判断项是否存在")]),t._v(" "),a("blockquote",[a("p",[t._v("~的特性是：操作数的负值-1；~12为-13；")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" firstname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ma'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" fullname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'jack ma'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("~")]),t._v("fullname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("firstname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[t._v("由于负数-1，找不到是-1，-1就是0了")]),t._v(" "),a("h3",{attrs:{id:"用-快速转换数字类型；"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用-快速转换数字类型；"}},[t._v("#")]),t._v(" 用'+'快速转换数字类型；")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'11'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//number")]),t._v("\n")])])]),a("p",[t._v("如果+号前面有数字则会成拼接符;")]),t._v(" "),a("h2",{attrs:{id:"十三、隐式转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十三、隐式转换"}},[t._v("#")]),t._v(" 十三、隐式转换")]),t._v(" "),a("ol",[a("li",[t._v("在进行计算时，会隐式转换；10+true    为11；，10-true为9；")]),t._v(" "),a("li",[t._v("当+号遇到字符串的时候，+变成拼接符，将前后拼接起来，多个相加时，碰到引号开始拼接；")]),t._v(" "),a("li",[t._v("隐式转换会首先调用toString方法，如果没有则调用valueOf方法；")]),t._v(" "),a("li",[t._v("undefined和谁进行运算都是NaN")]),t._v(" "),a("li",[t._v("两个+会是NaN：  'a'+ + 'b'   aNaN 后面这一个b转`换为NaN")])]),t._v(" "),a("p",[t._v("上题相当于 'a'+(+'b')")]),t._v(" "),a("p",[t._v("理解：由于+是一元正号，计算操作数的数值时，会进行Number转换：Number('b')   转换为NaN，剩下的就是字符串和其他类型相加，都会被转化为字符串；")]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" date "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("date   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将进行Number(date)转换,转换成时间戳")]),t._v("\n")])])]),a("ol",{attrs:{start:"6"}},[a("li",[t._v("{}空对象和谁进行运算都自动转换toString，为[object Object]；")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"两个数的和为"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("y")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"两个数的和为"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//NaN;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//y没有传值，10+undefined; 为NaN undefined是字符串类型,+号遇到字符串时隐式转换了;")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果没有(x+y)的小括号,则会是10undefined,成拼接符;")]),t._v("\n")])])]),a("h3",{attrs:{id:"连等运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连等运算符"}},[t._v("#")]),t._v(" 连等运算符")]),t._v(" "),a("p",[a("code",[t._v("a=b=c")]),t._v("    为b=c是a=b；永远取等号右边的表达式结果赋值到等号的左侧；")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined;")]),t._v("\n")])])]),a("p",[t._v("理解:")]),t._v(" "),a("p",[t._v("var a = {n:1}")]),t._v(" "),a("p",[t._v("var b = a")]),t._v(" "),a("p",[t._v("a = {n:2}     // 这里a指向了新的地址,b还是指向原来的地址,b没有重新被赋值;")]),t._v(" "),a("p",[t._v("上题中点的优先级最高,首先a.x = a,赋值了,a又被重新赋值,因此b.x有值;a.x为新对象为undefined;")]),t._v(" "),a("h2",{attrs:{id:"十四、json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十四、json"}},[t._v("#")]),t._v(" 十四、json")]),t._v(" "),a("p",[t._v("json 是一种数据交换格式，从后台请求下来的数据基本上都是 json 类型，")]),t._v(" "),a("p",[t._v("json 数据用｛｝括起来，里面的数据以 key：value 存储。")]),t._v(" "),a("h2",{attrs:{id:"高频面试题："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高频面试题："}},[t._v("#")]),t._v(" 高频面试题：")]),t._v(" "),a("p",[t._v("● js 数据类型？")]),t._v(" "),a("p",[t._v("● null 和 undefined 的区别？")]),t._v(" "),a("p",[t._v("● 运算符的种类？")]),t._v(" "),a("p",[t._v("● var a = 10;var b = a++; a、b 最后的结果是？")]),t._v(" "),a("p",[t._v("● “==”与“===”的区别？")]),t._v(" "),a("p",[t._v("● console.log(0.1+0.2 == 0.3)。")]),t._v(" "),a("p",[t._v("● NaN 会在什么样的情况下出现呢？列举出现这种情况的代码。")]),t._v(" "),a("p",[t._v("● 列举三种强制类型转换和 2 种隐式类型转换；")])])}),[],!1,null,null,null);s.default=e.exports}}]);